1.
expand: x 2

                    2^0+1 2^1+1 2^2+1           2^3+1           2^k
                    1   2       4               8       16
          n     1   2   3   4   5   6   7   8   9   ... 17  ... n       sum
create array        1   1       1               1       1       x       O(log n)
copy                1   2       4               8       16      x
                    1   1   1   1   1   1   1   1                   =   O(n)
assign          1   1   1   1   1   1   1   1   1       1       x   =   O(n)


[1]

[1, 2]
[1, 2, 3, 4]
[_, _, _, _, _, _, _, _]

malloc()

O(n)

Theta(log n) = O(n)

2^k = n -> k = log n

1 + 2 + 4 + 8 + ..... + m
2^0 + 2^1 + 2^2 + 2^3 + ..... + 2^k

2 x 2^k - 1
2^k = n -> k = log_2 n

2 x 2^(log_2 n) - 1
2 x n - 1;


O(log n) + O(n) + O(n) -> O(n)

O(n) / n -> O(1)

不扩容的时候O(1)
扩容时时 O(n)
均摊后每一次是 O(1)

expand: + 2

[]
[_, _]
[_, _, _, _]
[_, _, _, _, _, _]










T(n) = O(1)         when n = 1
     = T(n - 1) + c when n > 1

Code 1 的时间公式
T(n) = O(1)                 , n = 1
     = T(n/2) + T(n/2) + c  , n > 1

Code 2 的时间公式
T(n) = O(1)                 , n = 1
     = T(n/2) + c           , n > 1


power2(n) = T(n)
power2(n/2) = T(n/2)



T(n) 代表 调用 解决方案函数 传参 n 时，执行整个函数所需要花费的时间点数
     代表 对 n 的大小的问题 解决需要花费多少时间点数

Code 2 的时间复杂度
T(n) = O(1)                 , n = 1
     = T(n/2) + c           , n > 1

T(k) = T(k/2) + c

T(abc) = T(abc/2) + c
T((n/2)) = T((n/2)/2) + c
T(n/2) = T(n/4) + c


T(n) = c + T(n/2)
     = c + (c + T((n/2)/2))
     = c + (c + (c + T(n/8)))   T(n/m)
     = c + c + c + .... (c + T(1))
     = c + c + c + .... (c + O(1))
     = c + c + c + .... (c + c_2)
     = c + c + c + ... + c + c_2
     = (log_2 n) c + c_2
     = O(logn)

n/(2^k) = 1
n = 2^k

k = log_2 n


f(x) = ax + b
f(s) = as + b
f(20) = a * 20 + b
f(x + y) = a(x + y) + b

T(n) = T(n/2) + 4
T(8) = T(8/2) + 4
     = T(4) + 4
        because T(4) = T(4/2) + 4
     = (T(4/2) + 4) + 4
     = T(2) + 4 + 4
     =


T(n)
T(n/2) 不是说 T(n) 的时间的 一半
T(n/2) 一半问题 所花的时间
T(n)/2


